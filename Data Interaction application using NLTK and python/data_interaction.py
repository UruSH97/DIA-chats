# -*- coding: utf-8 -*-
"""Data Interaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pH2GOIUpkGO4PQotuYYkpkNGVsRXw3B_

# A Simple Chatbot from Scratch in Python (using NLTK)

## Import necessary libraries
"""

import io
import random
import string # to process standard python strings
import warnings
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
warnings.filterwarnings('ignore')

"""## Downloading and installing NLTK



"""

pip install nltk

"""### Installing NLTK Packages



"""

import nltk
from nltk.stem import WordNetLemmatizer
nltk.download('popular', quiet=True) # for downloading packages
nltk.download('punkt')
nltk.download('wordnet')

"""**Json Data Interaction**"""

import json
# Function for loading json files
def load_intents_from_json(file_path):
    with open(file_path, 'r') as file:
        intents = json.load(file)
    return intents["intents"]


# crreationg function for getting response from json file
def get_response(intents, user_input):
    for intent in intents:
        for pattern in intent["patterns"]:
            if pattern.lower() in user_input.lower():
                return random.choice(intent["responses"])
    return "Sorry, I didn't understand that. Could you please rephrase your question?"

# basic command line interface to interact with users
def main():
    intents = load_intents_from_json("mockdata.json")

    while True:
        user_input = input("DIA: ")
        if user_input.lower() == 'exit':
            print("DIA: Goodbye!")
            break
        response = get_response(intents, user_input)
        print("DIA:", response)

if __name__ == "__main__":
    main()

"""**Text Data Interaction**

## Reading in the corpus
"""

f=open('/content/chat.txt','r',errors = 'ignore')
raw=f.read()
raw = raw.lower()# converts to lowercase

raw

"""## Tokenisation"""

sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences
word_tokens = nltk.word_tokenize(raw)# converts to list of words

sent_tokens

"""## Preprocessing

We shall now define a function called LemTokens which will take as input the tokens and return normalized tokens.
"""

lemmer = nltk.stem.WordNetLemmatizer()
#WordNet is a semantically-oriented dictionary of English included in NLTK.
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

"""## Keyword matching


"""

GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]
def greeting(sentence):

    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

# function to create response by matching using cosine similarity and tfidf
def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response

"""Finally, we will feed the lines that we want our bot to say while starting and ending a conversation depending upon userâ€™s input."""

t

flag=True
print("DIA: My name is DIA. I will answer your queries. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("DIA: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("DIA: "+greeting(user_response))
            else:
                print("DIA: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("DIA: Bye! take care..")

